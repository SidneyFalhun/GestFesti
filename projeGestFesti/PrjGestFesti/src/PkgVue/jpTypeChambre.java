/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package PkgVue;

import PkgEntite.HibernateUtil;
import PkgEntite.Typechambre;
import java.util.Iterator;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;

public class jpTypeChambre extends javax.swing.JPanel {
    /**
     * Creates new form jpTypeChambre
     */
    public jpTypeChambre() {
        Session session = HibernateUtil.getSessionFactory().openSession();
        jfPrincipal.setSession(session);
        initComponents();
            // Chargement du tableau des types de chambres
        chargerTable();
    }
    
    private void chargerTable(){
            //On charge la liste des types de chambres dans un tableau
        int nbligne;
        int i;
        nbligne = jtChambre.getRowCount();
            // On créer le tableau par défaut
        if(nbligne > 0){
            for(i = 0 ; i < nbligne ; i++){
                ((DefaultTableModel)jtChambre.getModel()).removeRow(0);
            }
                // On va chercher les données de la base
            String sReq = "From Typechambre";

            Query q = jfPrincipal.getSession().createQuery(sReq);
            Iterator tch = q.iterate();
                // Puis pour chaque ligne, on insert les données correspôndante
            while(tch.hasNext()){
                Typechambre unTypeChambre = (Typechambre) tch.next();
                ((DefaultTableModel) jtChambre.getModel()).addRow(new Object[] {unTypeChambre.getTchId(), unTypeChambre.getTchLibelle()});
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlTypeCh = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtChambre = new javax.swing.JTable();
        jlCode = new javax.swing.JLabel();
        jlLibelle = new javax.swing.JLabel();
        jtLibelle = new javax.swing.JTextField();
        jbModifier = new javax.swing.JButton();
        jbSupprimer = new javax.swing.JButton();
        jtCode = new javax.swing.JLabel();
        jbRecharger = new javax.swing.JButton();

        jlTypeCh.setText("Type de chambre");

        jtChambre.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Chambre", "Capacité"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtChambre.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtChambreMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtChambre);

        jlCode.setText("Code :");

        jlLibelle.setText("Capacité");

        jbModifier.setText("Modifier");
        jbModifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbModifierActionPerformed(evt);
            }
        });

        jbSupprimer.setText("Supprimer");
        jbSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSupprimerActionPerformed(evt);
            }
        });

        jbRecharger.setText("Recharger");
        jbRecharger.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jbRechargerMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(153, Short.MAX_VALUE)
                .addComponent(jlTypeCh)
                .addContainerGap(154, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jlCode)
                                .addGap(29, 29, 29))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jlLibelle)
                                .addGap(25, 25, 25)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jtLibelle, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(62, 62, 62)
                                .addComponent(jbModifier))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jtCode, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(63, 63, 63))
            .addGroup(layout.createSequentialGroup()
                .addGap(142, 142, 142)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jbRecharger)
                    .addComponent(jbSupprimer))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jlTypeCh)
                .addGap(38, 38, 38)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbRecharger)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtCode, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlCode))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlLibelle)
                    .addComponent(jtLibelle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbModifier))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(jbSupprimer)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jtChambreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtChambreMouseClicked
            // TODO add your handling code here:
        String sQuery;
            // On prend la valeur de la ligne
        int test = jtChambre.getSelectedRow();
        //System.out.println(test);
        Object sCode = jtChambre.getValueAt(test, 0);
        String TcCode = (String) sCode;
        if (TcCode != null)
        {
                // On va chercher les informations de ce type de chambre
            sQuery = "From Typechambre Where TCH_ID =?";
            jfPrincipal.getSession().beginTransaction();
            Query q = jfPrincipal.getSession().createQuery(sQuery);
            q.setParameter(0, TcCode);
            Iterator tch = q.iterate();
                // Puis on les insert dans les champs correspondants à chaque donnée
            while(tch.hasNext())
            {
                Typechambre unType = (Typechambre)tch.next();
                String code = (String) unType.getTchId();
                String libelle = (String) unType.getTchLibelle();
                jtCode.setText(code);
                jtLibelle.setText(libelle);         
            }
        }
    }//GEN-LAST:event_jtChambreMouseClicked

    private void jbModifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbModifierActionPerformed
        // TODO add your handling code here:
        if (jtCode.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Vous devez sélectionner un type de chambre", "Attention", JOptionPane.WARNING_MESSAGE);
        }
        else if (jtLibelle.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Vous devez remplir la capcité", "Attention", JOptionPane.WARNING_MESSAGE);
        }
        else if (jtLibelle.getText().length() >= 15){
                JOptionPane.showMessageDialog(null, "La capacité ne doit pas faire plus de 15 caractères", "Attention", JOptionPane.WARNING_MESSAGE);
        }
        else{
                // On récupère la saisie
            String code = (String) jtCode.getText();
            String libelle = (String) jtLibelle.getText();
                // On modifie les données dans la base
            String sReq = "From Typechambre Where TCh_Id =?";
            Query q = jfPrincipal.getSession().createQuery(sReq);
            q.setParameter(0, code);
            Typechambre uneTypeChambre = (Typechambre) q.uniqueResult();
            uneTypeChambre.setTchLibelle(libelle);
            Transaction tx = jfPrincipal.getSession().beginTransaction();
            tx.commit();
            jfPrincipal.getSession().update(uneTypeChambre);
                // On recharge le tableau
            chargerTable();
        }
    }//GEN-LAST:event_jbModifierActionPerformed

    private void jbSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSupprimerActionPerformed
        // TODO add your handling code here:
        if ((jtCode.getText().isEmpty()) || (jtLibelle.getText().isEmpty())){
                JOptionPane.showMessageDialog(null, "Vous devez sélectionner un type de chambre", "Attention", JOptionPane.WARNING_MESSAGE);
        }
        else{
                // On récupère le code de l'enregistrement que l'on veut supprimer puis on fait la requête
            int reply = JOptionPane.showConfirmDialog(null, "Voulez-vous réellement supprimer ce type de chambre ?", "Attention", JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.YES_OPTION){
                String code = (String) jtCode.getText();
                String sReq = "From Typechambre Where TCh_Id =?";
                Query q = jfPrincipal.getSession().createQuery(sReq);
                q.setParameter(0, code);
                Typechambre uneTypeChambre = (Typechambre) q.uniqueResult();
                Transaction tx = jfPrincipal.getSession().beginTransaction();
                    // On supprime l'enregistrement
                jfPrincipal.getSession().delete(uneTypeChambre);
                    // Puis on recharge la table
                chargerTable();
                jtCode.setText("");
                jtLibelle.setText("");
                tx.commit();
            }
        }
    }//GEN-LAST:event_jbSupprimerActionPerformed

    private void jbRechargerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbRechargerMouseClicked
        // TODO add your handling code here:
        chargerTable();
    }//GEN-LAST:event_jbRechargerMouseClicked
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbModifier;
    private javax.swing.JButton jbRecharger;
    private javax.swing.JButton jbSupprimer;
    private javax.swing.JLabel jlCode;
    private javax.swing.JLabel jlLibelle;
    private javax.swing.JLabel jlTypeCh;
    private javax.swing.JTable jtChambre;
    private javax.swing.JLabel jtCode;
    private javax.swing.JTextField jtLibelle;
    // End of variables declaration//GEN-END:variables

   

}
